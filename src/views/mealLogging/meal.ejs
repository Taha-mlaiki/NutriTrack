<%- include("../partials/header") %>

<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
/>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<body class="bg-lime-50 text-gray-800 font-sans">
  <!-- Header -->

  <%- include('../partials/navbar') %>

  <!-- Toast Notification -->
  <div
    id="toast"
    class="fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 hidden"
  ></div>

  <!-- Delete Confirmation Modal -->
  <div
    id="deleteModal"
    class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden"
  >
    <div class="bg-white rounded-xl p-6 max-w-sm mx-4">
      <div class="text-center">
        <i
          class="fas fa-exclamation-triangle text-3xl text-yellow-500 mb-4"
        ></i>
        <h3 class="text-xl font-semibold mb-2">Delete Meal</h3>
        <p class="text-gray-600 mb-6">
          Are you sure you want to delete this meal? This action cannot be
          undone.
        </p>
        <div class="flex gap-3 justify-center">
          <button
            id="cancelDelete"
            class="px-4 py-2 rounded-md border-2 border-gray-300 text-gray-700 font-semibold hover:bg-gray-50 transition"
          >
            Cancel
          </button>
          <button
            id="confirmDelete"
            class="px-4 py-2 rounded-md bg-red-500 text-white font-semibold hover:bg-red-600 transition"
          >
            Delete
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <main class="max-w-5xl mx-auto px-4 my-8">
    <!-- Page Header -->
    <div class="text-center mb-8">
      <h1 class="text-3xl font-bold text-gray-800">Log Your Meal</h1>
      <p class="text-gray-500">Track your nutrition with AI-powered analysis</p>
    </div>

    <!-- Image Upload Section -->
    <section
      id="uploadSection"
      class="bg-white rounded-xl p-6 shadow mb-8 block"
    >
      <h2
        class="flex items-center gap-2 text-xl font-semibold mb-6 text-gray-800"
      >
        <i class="fas fa-camera text-green-600"></i> Upload Meal Image
      </h2>

      <div
        id="uploadArea"
        class="border-2 border-dashed border-gray-300 rounded-xl p-10 text-center hover:border-green-600 cursor-pointer transition mb-6"
      >
        <i class="fas fa-cloud-upload-alt text-5xl text-gray-400 mb-4"></i>
        <h3 class="text-lg font-semibold mb-1">Upload a Photo of Your Meal</h3>
        <p class="text-gray-500 mb-1">
          Drag & drop an image or click to browse
        </p>
        <p class="text-gray-400 text-sm mb-4">
          Supported formats: JPG, PNG (Max 5MB)
        </p>
        <button
          id="browseBtn"
          class="px-4 py-2 rounded-md border-2 border-green-600 text-green-600 font-semibold hover:bg-green-50 transition"
        >
          <i class="fas fa-folder-open"></i> Browse Files
        </button>
        <input type="file" id="fileInput" accept="image/*" class="hidden" />
      </div>

      <!-- Camera preview -->
      <div id="cameraPreview" class="hidden max-w-md mx-auto">
        <video
          id="video"
          autoplay
          playsinline
          class="rounded-lg w-full"
        ></video>
        <canvas id="canvas" class="hidden rounded-lg w-full"></canvas>
        <div class="flex gap-4 justify-center mt-4">
          <button
            id="captureBtn"
            class="px-4 py-2 rounded-md border-2 border-green-600 text-green-600 font-semibold hover:bg-green-50 transition"
          >
            <i class="fas fa-camera"></i> Capture
          </button>
          <button
            id="retakeBtn"
            class="hidden px-4 py-2 rounded-md border-2 border-green-600 text-green-600 font-semibold hover:bg-green-50 transition"
          >
            <i class="fas fa-redo"></i> Retake
          </button>
        </div>
      </div>

      <div class="flex gap-4 justify-end mt-6">
        <button
          id="useCameraBtn"
          class="px-4 py-2 rounded-md border-2 border-green-600 text-green-600 font-semibold hover:bg-green-50 transition"
        >
          <i class="fas fa-camera"></i> Use Camera
        </button>
        <button
          id="analyzeBtn"
          disabled
          class="px-4 py-2 rounded-md bg-orange-500 text-white font-semibold hover:bg-orange-600 transition disabled:opacity-50"
        >
          <i class="fas fa-search"></i>
          <span class="analyze-text">Analyze Meal</span>
          <span class="analyze-loading hidden">
            <i class="fas fa-spinner fa-spin"></i> Analyzing...
          </span>
        </button>
      </div>
    </section>

    <!-- Manual Section -->
    <section
      id="manualSection"
      class="hidden bg-white rounded-xl p-6 shadow mb-8"
    >
      <h2
        class="flex items-center gap-2 text-xl font-semibold mb-6 text-gray-800"
      >
        <i class="fas fa-utensils text-orange-500"></i> Manual Food Entry
      </h2>

      <div class="relative mb-6">
        <i
          class="fas fa-search absolute left-4 top-1/2 -translate-y-1/2 text-gray-400"
        ></i>
        <input
          id="foodSearch"
          type="text"
          placeholder="Search for foods (e.g., apple, chicken breast)"
          class="w-full pl-12 pr-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:outline-none"
        />
      </div>

      <div
        id="foodResults"
        class="hidden max-h-56 overflow-y-auto border border-gray-300 rounded-md mb-6"
      ></div>
      <div id="selectedFoods" class="mb-6"></div>

      <div class="flex justify-end">
        <button
          id="analyzeManualBtn"
          class="px-4 py-2 rounded-md bg-orange-500 text-white font-semibold hover:bg-orange-600 transition"
        >
          <i class="fas fa-calculator"></i> Calculate Nutrition
        </button>
      </div>
    </section>

    <!-- Analysis Section -->
    <section
      id="analysisSection"
      class="bg-white rounded-xl p-6 shadow mb-8 hidden"
    >
      <h2
        class="flex items-center gap-2 text-xl font-semibold mb-6 text-gray-800"
      >
        <i class="fas fa-chart-bar text-green-600"></i> Meal Analysis
      </h2>

      <h3 class="font-semibold mb-3">Detected Foods</h3>
      <div
        id="detectedFoods"
        class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 mb-6"
      ></div>

      <div class="flex gap-4 justify-end">
        <button
          id="editMealBtn"
          class="px-4 py-2 rounded-md border-2 border-green-600 text-green-600 font-semibold hover:bg-green-50 transition"
        >
          <i class="fas fa-edit"></i> Edit Meal
        </button>
        <button
          id="saveMealBtn"
          class="px-4 py-2 rounded-md bg-orange-500 text-white font-semibold hover:bg-orange-600 transition"
        >
          <i class="fas fa-save"></i>
          <span class="save-text">Save to Log</span>
          <span class="save-loading hidden">
            <i class="fas fa-spinner fa-spin"></i> Saving...
          </span>
        </button>
      </div>
    </section>
  </main>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      // Elements
      const uploadArea = document.getElementById("uploadArea");
      const fileInput = document.getElementById("fileInput");
      const browseBtn = document.getElementById("browseBtn");
      const useCameraBtn = document.getElementById("useCameraBtn");
      const captureBtn = document.getElementById("captureBtn");
      const retakeBtn = document.getElementById("retakeBtn");
      const video = document.getElementById("video");
      const canvas = document.getElementById("canvas");
      const cameraPreview = document.getElementById("cameraPreview");
      const analyzeBtn = document.getElementById("analyzeBtn");
      const analysisSection = document.getElementById("analysisSection");
      const detectedFoods = document.getElementById("detectedFoods");
      const saveMealBtn = document.getElementById("saveMealBtn");
      const toast = document.getElementById("toast");
      const deleteModal = document.getElementById("deleteModal");
      const cancelDelete = document.getElementById("cancelDelete");
      const confirmDelete = document.getElementById("confirmDelete");

      // Loading elements
      const analyzeText = analyzeBtn.querySelector(".analyze-text");
      const analyzeLoading = analyzeBtn.querySelector(".analyze-loading");
      const saveText = saveMealBtn.querySelector(".save-text");
      const saveLoading = saveMealBtn.querySelector(".save-loading");

      // Add image preview element
      const previewImg = document.createElement("img");
      previewImg.id = "previewImg";
      previewImg.className = "max-w-full h-auto rounded-lg mt-4 hidden";
      uploadArea.appendChild(previewImg);

      let selectedFile = null;
      let mealData = {};
      let mealToDelete = null;

      // Toast notification function - FIXED
      function showToast(message, type = "info") {
        const toast = document.getElementById("toast");
        if (!toast) return;

        toast.textContent = message;
        toast.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 transition-all duration-300 transform`;

        // Set background color based on type
        if (type === "success") {
          toast.classList.add("bg-green-500", "text-white");
        } else if (type === "error") {
          toast.classList.add("bg-red-500", "text-white");
        } else {
          toast.classList.add("bg-blue-500", "text-white");
        }

        // Show toast with animation
        setTimeout(() => {
          toast.classList.remove("hidden", "opacity-0", "translate-y-[-100%]");
          toast.classList.add("opacity-100", "translate-y-0");
        }, 10);

        // Hide toast after 3 seconds
        setTimeout(() => {
          toast.classList.add("opacity-0", "translate-y-[-100%]");
          setTimeout(() => {
            toast.classList.add("hidden");
          }, 300);
        }, 3000);
      }

      // Reset analysis area
      function resetAnalysisArea() {
        // Clear file input and preview
        fileInput.value = "";
        selectedFile = null;
        previewImg.classList.add("hidden");
        previewImg.src = "";

        // Reset upload area text
        uploadArea.querySelector("h3").textContent =
          "Upload a Photo of Your Meal";

        // Disable analyze button
        analyzeBtn.disabled = true;

        // Hide analysis section
        analysisSection.classList.add("hidden");

        // Clear detected foods
        detectedFoods.innerHTML = "";

        // Stop camera if active
        if (video.srcObject) {
          video.srcObject.getTracks().forEach((track) => track.stop());
          video.srcObject = null;
        }

        // Reset camera preview
        cameraPreview.classList.add("hidden");
        video.classList.remove("hidden");
        canvas.classList.add("hidden");
        captureBtn.classList.remove("hidden");
        retakeBtn.classList.add("hidden");
        uploadArea.classList.remove("hidden");
      }

      // Display image preview
      function showImagePreview(file) {
        const reader = new FileReader();
        reader.onload = (e) => {
          previewImg.src = e.target.result;
          previewImg.classList.remove("hidden");
          uploadArea.querySelector("h3").textContent =
            file.name || "Captured Image";
        };
        reader.readAsDataURL(file);
      }

      // File upload handling
      browseBtn.addEventListener("click", () => fileInput.click());
      fileInput.addEventListener("change", (e) => {
        selectedFile = e.target.files[0];
        if (selectedFile) {
          analyzeBtn.disabled = false;
          showImagePreview(selectedFile);
        }
      });

      // Drag and drop
      uploadArea.addEventListener("dragover", (e) => {
        e.preventDefault();
        uploadArea.classList.add("border-green-600");
      });
      uploadArea.addEventListener("dragleave", () => {
        uploadArea.classList.remove("border-green-600");
      });
      uploadArea.addEventListener("drop", (e) => {
        e.preventDefault();
        uploadArea.classList.remove("border-green-600");
        selectedFile = e.dataTransfer.files[0];
        if (selectedFile) {
          analyzeBtn.disabled = false;
          showImagePreview(selectedFile);
        }
      });

      // Camera handling
      useCameraBtn.addEventListener("click", async () => {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
          showToast("Camera not supported by this browser", "error");
          return;
        }
        cameraPreview.classList.remove("hidden");
        uploadArea.classList.add("hidden");
        previewImg.classList.add("hidden");
        try {
          const stream = await navigator.mediaDevices.getUserMedia({
            video: true,
          });
          video.srcObject = stream;
        } catch (err) {
          console.error("Camera error:", err);
          showToast("Failed to access camera", "error");
        }
      });

      captureBtn.addEventListener("click", () => {
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        canvas.getContext("2d").drawImage(video, 0, 0);
        canvas.toBlob((blob) => {
          selectedFile = new File([blob], "captured-meal.jpg", {
            type: "image/jpeg",
          });
          analyzeBtn.disabled = false;
          video.classList.add("hidden");
          canvas.classList.remove("hidden");
          captureBtn.classList.add("hidden");
          retakeBtn.classList.remove("hidden");
          showImagePreview(selectedFile);
          uploadArea.classList.remove("hidden");
          cameraPreview.classList.add("hidden");
          video.srcObject?.getTracks().forEach((track) => track.stop());
        }, "image/jpeg");
      });

      retakeBtn.addEventListener("click", async () => {
        video.classList.remove("hidden");
        canvas.classList.add("hidden");
        captureBtn.classList.remove("hidden");
        retakeBtn.classList.add("hidden");
        selectedFile = null;
        analyzeBtn.disabled = true;
        previewImg.classList.add("hidden");
        uploadArea.classList.add("hidden");
        cameraPreview.classList.remove("hidden");
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
          showToast("Camera not supported by this browser", "error");
          return;
        }
        try {
          const stream = await navigator.mediaDevices.getUserMedia({
            video: true,
          });
          video.srcObject = stream;
        } catch (err) {
          console.error("Camera error:", err);
          showToast("Failed to access camera", "error");
        }
      });

      // Analyze meal
      analyzeBtn.addEventListener("click", async () => {
        if (!selectedFile) {
          showToast("Please select or capture an image", "error");
          return;
        }

        analyzeBtn.disabled = true;
        analyzeText.classList.add("hidden");
        analyzeLoading.classList.remove("hidden");

        const formData = new FormData();
        formData.append("image", selectedFile);

        try {
          const response = await axios.post("/meals/analyze", formData);
          const data = response.data;
          console.log("Analysis data:", data);

          if (response.status === 200 && data.foods) {
            mealData = data;
            displayAnalysis(data);
            analysisSection.classList.remove("hidden");
            saveMealBtn.disabled = false;
          } else {
            console.error("Invalid data:", data);
            displayError(data.error || "Invalid analysis data");
          }
        } catch (err) {
          console.error("Error analyzing meal:", err);
          displayError("Error: " + err.message);
        } finally {
          analyzeBtn.disabled = false;
          analyzeText.classList.remove("hidden");
          analyzeLoading.classList.add("hidden");
        }
      });

      // Display analysis
      function displayAnalysis(data) {
        detectedFoods.innerHTML = "";
        data.foods.forEach((food) => {
          const foodDiv = document.createElement("div");
          foodDiv.className =
            "bg-lime-50 p-4 rounded-lg shadow-sm hover:shadow-md transition duration-200 border border-gray-200";
          foodDiv.innerHTML = `
        <div class="flex items-center gap-2 mb-2">
          <i class="fas fa-utensils text-green-600"></i>
          <h4 class="font-semibold text-lg text-gray-800">${food.name}</h4>
        </div>
        <div class="grid grid-cols-2 gap-2 text-sm">
          <div class="flex items-center gap-1">
            <i class="fas fa-fire text-orange-500"></i>
            <span>Calories: ${food.calories_per_unit} cal</span>
          </div>
          <div class="flex items-center gap-1">
            <i class="fas fa-bread-slice text-green-600"></i>
            <span>Carbs: ${food.carbs} g</span>
          </div>
          <div class="flex items-center gap-1">
            <i class="fas fa-dumbbell text-yellow-500"></i>
            <span>Protein: ${food.protein} g</span>
          </div>
          <div class="flex items-center gap-1">
            <i class="fas fa-oil-can text-purple-600"></i>
            <span>Fats: ${food.fats} g</span>
          </div>
          <div class="flex items-center gap-1">
            <i class="fas fa-tint text-blue-500"></i>
            <span>Sodium: ${food.sodium} mg</span>
          </div>
          <div class="flex items-center gap-1">
            <i class="fas fa-leaf text-teal-500"></i>
            <span>Fiber: ${food.fiber} g</span>
          </div>
        </div>
      `;
          detectedFoods.appendChild(foodDiv);
        });
      }

      // Display error in analysis section
      function displayError(message) {
        detectedFoods.innerHTML = `
      <div class="bg-red-100 border-l-4 border-red-500 p-4 rounded-md text-red-700">
        <i class="fas fa-exclamation-triangle mr-2"></i> ${message}
      </div>
    `;
        analysisSection.classList.remove("hidden");
      }

      // Save meal to log - KEEPING ORIGINAL DATA FORMAT
      saveMealBtn.addEventListener("click", async () => {
        if (!selectedFile || !mealData.foods) {
          showToast("No meal to save", "error");
          return;
        }

        saveMealBtn.disabled = true;
        saveText.classList.add("hidden");
        saveLoading.classList.remove("hidden");

        // KEEPING THE ORIGINAL DATA FORMAT
        const formData = new FormData();
        formData.append("image", selectedFile);
        formData.append("totals", JSON.stringify(mealData.totals));
        formData.append("foods", JSON.stringify(mealData.foods));

        try {
          const response = await axios.post("/meals", formData);
          if (response.status === 200) {
            showToast("Meal saved successfully!", "success");
            resetAnalysisArea(); // Clear the analysis area
            loadMealHistory(); // Reload meal history
          } else {
            showToast("Failed to save meal", "error");
          }
        } catch (err) {
          showToast("Error saving meal: " + err.message, "error");
        } finally {
          saveMealBtn.disabled = false;
          saveText.classList.remove("hidden");
          saveLoading.classList.add("hidden");
        }
      });

      // Delete confirmation modal handlers
      cancelDelete.addEventListener("click", () => {
        deleteModal.classList.add("hidden");
        mealToDelete = null;
      });

      confirmDelete.addEventListener("click", async () => {
        if (!mealToDelete) return;

        try {
          const response = await axios.delete(`/meals/${mealToDelete}`);
          if (response.status === 200) {
            // Remove the meal from the DOM
            const mealElement = document
              .querySelector(`[data-id="${mealToDelete}"]`)
              ?.closest(".bg-lime-50");
            if (mealElement) {
              mealElement.remove();
            }
            showToast("Meal deleted successfully!", "success");
            loadMealHistory(); // Reload to refresh the grid
          } else {
            showToast("Failed to delete meal", "error");
          }
        } catch (err) {
          console.error("Failed to delete meal:", err);
          showToast("Error deleting meal: " + err.message, "error");
        } finally {
          deleteModal.classList.add("hidden");
          mealToDelete = null;
        }
      });

      // Toggle food details dropdown
      function toggleFoodDetails(button) {
        const details = button.nextElementSibling;
        const icon = button.querySelector("i");

        if (details.classList.contains("hidden")) {
          details.classList.remove("hidden");
          icon.classList.remove("fa-chevron-down");
          icon.classList.add("fa-chevron-up");
        } else {
          details.classList.add("hidden");
          icon.classList.remove("fa-chevron-up");
          icon.classList.add("fa-chevron-down");
        }
      }

      // Fetch and display meal history
      async function loadMealHistory() {
        try {
          const response = await axios.get("/meals/history");
          const meals = response.data;

          // Remove existing history section if it exists
          const existingHistory = document.getElementById("mealHistory");
          if (existingHistory) existingHistory.parentElement.remove();

          const historySection = document.createElement("section");
          historySection.className = "bg-white rounded-xl p-6 shadow mb-8";
          historySection.innerHTML = `
        <h2 class="flex items-center gap-2 text-xl font-semibold mb-6 text-gray-800">
          <i class="fas fa-history text-green-600"></i> Meal History
        </h2>
        <div id="mealHistory" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"></div>
      `;
          document
            .querySelector("#analysisSection")
            .insertAdjacentElement("afterend", historySection);

          const mealHistory = document.getElementById("mealHistory");

          if (meals.length === 0) {
            mealHistory.innerHTML = `
              <div class="col-span-full text-center py-8 text-gray-500">
                <i class="fas fa-utensils text-4xl mb-4 text-gray-300"></i>
                <p>No meals logged yet. Upload your first meal to get started!</p>
              </div>
            `;
            return;
          }

          meals.forEach((meal, index) => {
            const mealDiv = document.createElement("div");
            mealDiv.className =
              "bg-lime-50 p-4 rounded-lg shadow-sm hover:shadow-md transition duration-200 border border-gray-200";

            mealDiv.innerHTML = `
          <div class="flex items-center justify-between mb-3">
            <h4 class="font-semibold text-lg text-gray-800">Meal ${
              index + 1
            }</h4>
            <span class="text-xs text-gray-500">${new Date(
              meal.timestamp
            ).toLocaleDateString()}</span>
          </div>
          
          <!-- Meal Image -->
          <div class="mb-3">
            <div class="relative group">
              ${meal.image_url ? `
                 <img 
                src="${meal.image_url || "/images/meal-placeholder.jpg"}" 
                alt="Meal ${index + 1}"
                class="w-full h-72 object-cover rounded-lg border border-gray-200 group-hover:shadow-md transition duration-200"
                onerror="this.src='/images/meal-placeholder.jpg'"
              >
              
              ` : `<div class="absolute inset-0 bg-gray-100 flex items-center justify-center rounded-lg border border-gray-200"><i class="fas fa-image text-gray-300 text-6xl"></i></div>`}
           
            </div>
          </div>
          
          <!-- Food Count Dropdown -->
          <div class="mb-3">
            <button class="food-dropdown-btn w-full flex items-center justify-between p-2 bg-green-100 text-green-800 rounded-lg hover:bg-green-200 transition duration-200">
              <span class="font-medium">
                <i class="fas fa-utensils mr-2"></i>
                ${meal.foods.length} Food${
              meal.foods.length > 1 ? "s" : ""
            } Detected
              </span>
              <i class="fas fa-chevron-down text-sm transition-transform duration-200"></i>
            </button>
            <div class="food-details hidden mt-2 space-y-2">
              ${meal.foods
                .map(
                  (food) => `
                <div class="bg-white p-2 rounded border text-sm">
                  <div class="font-medium text-gray-800">${food.name}</div>
                </div>
              `
                )
                .join("")}
            </div>
          </div>
          
          <!-- Total Nutrition Summary -->
          <div class="bg-white p-3 rounded-lg border mb-3">
            <h5 class="font-semibold text-gray-800 mb-2 text-sm flex items-center gap-1">
              <i class="fas fa-chart-pie text-green-600"></i>
              Total Nutrition
            </h5>
            <div class="grid grid-cols-2 gap-1 text-xs text-gray-600">
              <div class="flex items-center gap-1">
                <i class="fas fa-fire text-orange-500"></i>
                <span>Calories: ${Math.round(
                  meal.calories
                )} cal</span>
              </div>
              <div class="flex items-center gap-1">
                <i class="fas fa-bread-slice text-green-600"></i>
                <span>Carbs: ${meal.carbs} g</span>
              </div>
              <div class="flex items-center gap-1">
                <i class="fas fa-dumbbell text-yellow-500"></i>
                <span>Protein: ${meal.proteins} g</span>
              </div>
              <div class="flex items-center gap-1">
                <i class="fas fa-oil-can text-purple-600"></i>
                <span>Fats: ${meal.fats} g</span>
              </div>
              <div class="flex items-center gap-1">
                <i class="fas fa-tint text-blue-500"></i>
                <span>Sodium: ${meal.sodium} mg</span>
              </div>
              <div class="flex items-center gap-1">
                <i class="fas fa-leaf text-teal-500"></i>
                <span>Fiber: ${meal.fiber} g</span>
              </div>
            </div>
          </div>
          
          <!-- Detailed Food Breakdown -->
          <div class="mb-3">
            <button class="nutrition-dropdown-btn w-full flex items-center justify-between p-2 bg-blue-100 text-blue-800 rounded-lg hover:bg-blue-200 transition duration-200">
              <span class="font-medium">
                <i class="fas fa-chart-bar mr-2"></i>
                Detailed Breakdown
              </span>
              <i class="fas fa-chevron-down text-sm transition-transform duration-200"></i>
            </button>
            <div class="nutrition-details hidden mt-2 space-y-2">
              ${meal.foods
                .map(
                  (food) => `
                <div class="bg-white p-3 rounded border text-xs">
                  <div class="font-semibold text-gray-800 mb-2 flex items-center gap-1">
                    <i class="fas fa-utensils text-green-600"></i>
                    ${food.name}
                  </div>
                  <div class="grid grid-cols-2 gap-1 text-gray-600">
                    <div class="flex items-center gap-1">
                      <i class="fas fa-fire text-orange-500"></i>
                      <span>${food.calories_per_unit || 0} cal</span>
                    </div>
                    <div class="flex items-center gap-1">
                      <i class="fas fa-bread-slice text-green-600"></i>
                      <span>${food.carbs || 0} g carbs</span>
                    </div>
                    <div class="flex items-center gap-1">
                      <i class="fas fa-dumbbell text-yellow-500"></i>
                      <span>${food.protein || 0} g protein</span>
                    </div>
                    <div class="flex items-center gap-1">
                      <i class="fas fa-oil-can text-purple-600"></i>
                      <span>${food.fats || 0} g fats</span>
                    </div>
                    <div class="flex items-center gap-1">
                      <i class="fas fa-tint text-blue-500"></i>
                      <span>${food.sodium || 0} mg sodium</span>
                    </div>
                    <div class="flex items-center gap-1">
                      <i class="fas fa-leaf text-teal-500"></i>
                      <span>${food.fiber || 0} g fiber</span>
                    </div>
                  </div>
                </div>
              `
                )
                .join("")}
            </div>
          </div>
          
          <button class="mt-2 w-full bg-red-500 text-white px-3 py-2 rounded-lg text-sm flex items-center justify-center gap-2 hover:bg-red-600 transition deleteMealBtn" data-id="${
            meal.meal_id
          }">
            <i class="fas fa-trash"></i> Delete Meal
          </button>
        `;
            mealHistory.appendChild(mealDiv);

            // Add event listeners for dropdowns
            const foodDropdownBtn = mealDiv.querySelector(".food-dropdown-btn");
            const nutritionDropdownBtn = mealDiv.querySelector(
              ".nutrition-dropdown-btn"
            );

            foodDropdownBtn.addEventListener("click", () =>
              toggleFoodDetails(foodDropdownBtn)
            );
            nutritionDropdownBtn.addEventListener("click", () =>
              toggleFoodDetails(nutritionDropdownBtn)
            );
          });

          // Attach delete button listeners
          document.querySelectorAll(".deleteMealBtn").forEach((btn) => {
            btn.addEventListener("click", (e) => {
              mealToDelete = e.target.closest("button").dataset.id;
              deleteModal.classList.remove("hidden");
            });
          });
        } catch (err) {
          console.error("Error loading meal history:", err);
          showToast("Error loading meal history", "error");
        }
      }

      // Load meal history on page load
      loadMealHistory();
    });
  </script>
</body>
<%- include("../partials/footer") %>
